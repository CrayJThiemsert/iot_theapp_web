name: iot_theapp_web
description: A new IoT theApp Flutter project for Web.
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+17

environment:
  sdk: '>=3.0.0-430.0.dev <4.0.0'

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter


  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.5

  unique_identifier: ^0.3.0
#  mqtt_client: ^9.7.2
  mqtt_client: ^10.0.0

  # To connect firebase realtime database
  firebase_database: ^10.2.2
  firebase_core: ^2.3.1

  # side library
  intl: ^0.18.0

  # Simplify Equality Comparisons
  equatable: ^2.0.5

  # An efficient flutter package for an on-tap bounce animation on any flutter widgets
  flutter_bounce: ^1.1.0

  # A composable, Future-based library for making HTTP requests.
  http: ^0.13.4

  # Brings functionality to execute code after the first layout of a widget has been performed, i.e. after the first frame has been displayed.
  after_layout: ^1.1.0

  # A Flutter plugin for opening iOS and Android phone settings from an app.
  app_settings: ^4.1.1

  # The most complete flutter plugin packages for open various settings screen in Android and Ios
  open_settings: ^2.0.2

  # This plugin allows Flutter apps to get available Wifi access point list where you can get almost all the information about AP accessing to WifiNetwork object.
  android_flutter_wifi: ^0.1.0

  # String validation and sanitization for Dart. Dart 2-compatible version of validator
  validators: ^3.0.0

  # A Flutter plugin to use the Firebase Authentication API.
#  firebase_auth: ^4.2.2

  # This plugin retrieves information about a device's connection to wifi.
  wifi_info_flutter: ^2.0.2

  # This plugin allows Flutter apps to discover network connectivity and configure themselves accordingly. It can distinguish between cellular vs WiFi connection.
  connectivity_plus: ^3.0.4

  # Shelf makes it easy to create and compose web servers and parts of web servers.
  shelf: ^1.2.0

  # Shelf makes it easy to build web applications in Dart by composing request handlers. This package offers a request router for Shelf, matching request to handlers using route patterns.
  shelf_router: ^1.1.2

  # Facilitator for having a Splash screen with a Flare animation until some work has been done for the initialization of the app
  flare_splash_screen: ^4.0.0

  # This Flutter plugin provides an API for querying information about an application package.
  package_info_plus: ^3.1.0

  # Chart
  fl_chart: ^0.62.0

  # horizontal list wheel

  # toast and In-App notification
  overlay_support: ^2.0.1

  # access variable from class
  provider: ^6.0.4

  # batch update realtime database
  cloud_firestore: ^4.5.0

  objectbox: ^2.0.0
  objectbox_flutter_libs: any

  # A simple toggle switch widget
  toggle_switch: ^2.1.0

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^2.0.0

  # icon app
#  flutter_launcher_icons: ^0.9.3
  icons_launcher: ^2.1.0

  build_runner: ^2.0.0
  objectbox_generator: any

#  android: "launcher_icon"
#flutter_icons:
#  android: true
#  ios: true
#  image_path: "images/atom_icon.png"
icons_launcher:
  image_path: "images/atom_icon_web.png"
  platforms:
    android:
      enable: true
    ios:
      enable: true

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg
  assets:
    - intro.flr
    - intro.riv
    - Penguin.flr
    - images/wifi1.png
    - images/wifi2.png
    - images/wifi3.png
    - images/
    - images/tanks/

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages

  fonts:
    - family: Kanit
      fonts:
        - asset: fonts/Kanit-Black.ttf
        - asset: fonts/Kanit-BlackItalic.ttf
        - asset: fonts/Kanit-Bold.ttf
        - asset: fonts/Kanit-BoldItalic.ttf
        - asset: fonts/Kanit-ExtraBold.ttf
        - asset: fonts/Kanit-ExtraBoldItalic.ttf
        - asset: fonts/Kanit-ExtraLight.ttf
        - asset: fonts/Kanit-ExtraLightItalic.ttf
        - asset: fonts/Kanit-Italic.ttf
        - asset: fonts/Kanit-Light.ttf
        - asset: fonts/Kanit-LightItalic.ttf
        - asset: fonts/Kanit-Medium.ttf
        - asset: fonts/Kanit-MediumItalic.ttf
        - asset: fonts/Kanit-Regular.ttf
        - asset: fonts/Kanit-SemiBold.ttf
        - asset: fonts/Kanit-SemiBoldItalic.ttf
        - asset: fonts/Kanit-Thin.ttf
        - asset: fonts/Kanit-ThinItalic.ttf